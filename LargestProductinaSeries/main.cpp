/*The four adjacent digits in the
1000-digit number that have the greatest product are

 9 * 9 * 8 * 9 = 5832

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the
1000-digit number that have the greatest product. What is the value of this product?*/


#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <iostream>

using namespace std;

const size_t number_length = 1000;
//remember: in C/C++ a string needs 1 extra bit for the terminating character to store it
//        VVVVVVVVVVVVVVVVVVVVVVVVVVVV
// these characters appear differently in memory
//you can view an ascii chart to help understand what they appear as
const char number[ number_length + 1 ] = "73167176531330624919225119674426574742355349194934"
                      "96983520312774506326239578318016984801869478851843"
                      "85861560789112949495459501737958331952853208805511"
                      "12540698747158523863050715693290963295227443043557"
                      "66896648950445244523161731856403098711121722383113"
                      "62229893423380308135336276614282806444486645238749"
                      "30358907296290491560440772390713810515859307960866"
                      "70172427121883998797908792274921901699720888093776"
                      "65727333001053367881220235421809751254540594752243"
                      "52584907711670556013604839586446706324415722155397"
                      "53697817977846174064955149290862569321978468622482"
                      "83972241375657056057490261407972968652414535100474"
                      "82166370484403199890008895243450658541227588666881"
                      "16427171479924442928230863465674813919123162824586"
                      "17866458359124566529476545682848912883142607690042"
                      "24219022671055626321111109370544217506941658960408"
                      "07198403850962455444362981230987879927244284909188"
                      "84580156166097919133875499200524063689912560717606"
                      "05886116467109405077541002256983155200055935729725"
                      "71636269561882670428252483600823257530420752963450";
int main ( int argc, const char* argv[] ){
    const uint32_t prod_len = 13;
    uint32_t i, j;
    uint32_t max_loc; //finds the location at which the max number was found
    uint64_t cur_prod;
    uint64_t max_prod = 0;

    //calculating current inital product
    for ( i = 0; i + prod_len <= number_length; ++i ){
        cur_prod = 1;
        for ( j = 0; j < prod_len; ++j ){
            // '0' is the code for 0 and stores the value of 48 - the number of where its store in memory
            // ex: 57 - 48 = 9  57 is the number 9 in memory
            cur_prod *= (number[i + j] - '0'); //converts the number in memory to a "integer value"
        }
        if ( cur_prod > max_prod ){
            max_prod = cur_prod;
            max_loc = i;
        }
    }

    cout << "Max product: " << max_prod << " Max location: " << max_loc;

    return 0;
}



